import { css } from 'emotion'
import { FunctionComponent, createElement, memo, useState } from 'react'
import { FaEdit } from 'react-icons/fa'

import { isValidJson } from '../../overmind/utils'
import { colors } from '../../theme'
import * as styles from './styles'
import { isArray, isObject } from './utils'

function renderValue({
  path,
  value,
  renderPaths,
  expandedPaths,
  onClickPath,
  onToggleExpand,
  selectedStatePath,
  onSubmitState,
}: {
  onSubmitState?: (newState: string) => void
  selectedStatePath?: string
  onToggleExpand: (path: string[]) => void
  path: string
  value: any
  renderPaths?: RenderPaths
  expandedPaths: string[]
  onClickPath?: (path: string[]) => void
}) {
  const wrapper = renderPaths && renderPaths[path]
  let node

  if (isObject(value)) {
    node = (
      <Nested
        key={path}
        startBracket="{"
        endBracket="}"
        path={path}
        expandedPaths={expandedPaths}
        hasWrapper={Boolean(wrapper)}
        onClickPath={onClickPath}
        renderPaths={renderPaths}
        onToggleExpand={onToggleExpand}
        isArray={false}
        value={value}
        selectedStatePath={selectedStatePath}
        onSubmitState={onSubmitState}
      />
    )
  } else if (isArray(value)) {
    node = (
      <Nested
        key={path}
        startBracket="["
        endBracket="]"
        renderPaths={renderPaths}
        path={path}
        expandedPaths={expandedPaths}
        hasWrapper={Boolean(wrapper)}
        onClickPath={onClickPath}
        onToggleExpand={onToggleExpand}
        isArray
        value={value}
        selectedStatePath={selectedStatePath}
        onSubmitState={onSubmitState}
      />
    )
  } else {
    node = (
      <ValueComponent
        key={path}
        path={path}
        value={value}
        onClickPath={onClickPath}
        selectedStatePath={selectedStatePath}
        hasWrapper={Boolean(wrapper)}
        onSubmitState={onSubmitState}
      />
    )
  }

  return wrapper ? wrapper(node) : node
}

type PathToolsProps = {
  path: string
  onClickPath: (path: string[]) => void
  disabled: boolean
}

const PathTools: FunctionComponent<PathToolsProps> = ({
  path,
  onClickPath,
  children,
  disabled,
}) => {
  return disabled ? (
    <div className={styles.pathToolsWrapper}>{children}</div>
  ) : (
    <div className={styles.pathToolsWrapper}>
      {children}{' '}
      <FaEdit
        className={styles.toolIcon}
        onClick={(event) => {
          event.stopPropagation()
          onClickPath(path.split('.'))
        }}
      />
    </div>
  )
}

type EditValueProps = {
  value: any
  onSubmit: (newState: string) => void
}

const EditValue: FunctionComponent<EditValueProps> = ({ value, onSubmit }) => {
  const [state, setState] = useState(() => JSON.stringify(value, null, 2))
  const isValid = isValidJson(state)

  return (
    <span
      className={styles.editValueWrapper}
      onClick={(event) => event.stopPropagation()}
    >
      <div className={styles.editValuePopup}>
        <textarea
          autoFocus
          value={state}
          onChange={(event) => setState(event.currentTarget.value)}
          className={styles.newState}
          style={{
            borderColor: isValid ? null : colors.red,
          }}
        />
        {isValid ? (
          <button onClick={() => onSubmit(state)} className={styles.ok}>
            OK
          </button>
        ) : null}
      </div>
    </span>
  )
}

type NestedProps = {
  startBracket: string
  endBracket: string
  expandedPaths: string[]
  renderPaths: RenderPaths
  path: string
  hasWrapper: boolean
  isArray: boolean
  value: any
  onToggleExpand: (path: string[]) => void
  onClickPath?: (path: string[]) => void
  selectedStatePath: string
  onSubmitState: (newState: string) => void
}

const Nested: FunctionComponent<NestedProps> = memo(
  ({
    expandedPaths,
    path,
    onToggleExpand,
    onClickPath,
    startBracket,
    renderPaths,
    hasWrapper,
    endBracket,
    isArray,
    selectedStatePath,
    value,
    onSubmitState,
  }) => {
    const shouldCollapse = !expandedPaths.includes(path)

    if (selectedStatePath && path === selectedStatePath) {
      return (
        <div
          className={styles.inlineNested}
          onClick={(event) => {
            event.stopPropagation()
            onToggleExpand(path.split('.'))
          }}
        >
          {path.length ? (
            <span className={styles.key}>{path.split('.').pop()}:</span>
          ) : null}
          <EditValue value={value} onSubmit={onSubmitState} />
        </div>
      )
    }

    if (shouldCollapse) {
      const keys = Object.keys(value)

      return (
        <div
          className={styles.inlineNested}
          onClick={(event) => {
            event.stopPropagation()
            onToggleExpand(path.split('.'))
          }}
        >
          <PathTools
            path={path}
            onClickPath={onClickPath}
            disabled={!onSubmitState || hasWrapper}
          >
            {path.length ? (
              <span className={styles.key}>{path.split('.').pop()}:</span>
            ) : null}
            {startBracket}
            <span className={styles.keyCount}>
              {isArray
                ? keys.length + ' items'
                : keys
                    .sort()
                    .slice(0, 3)
                    .join(', ') + '...'}
            </span>
            {endBracket}
          </PathTools>
        </div>
      )
    }

    return (
      <div>
        <div
          className={styles.bracket(true)}
          onClick={(event) => {
            event.stopPropagation()
            onToggleExpand(path.split('.'))
          }}
        >
          <PathTools
            path={path}
            onClickPath={onClickPath}
            disabled={!onSubmitState || hasWrapper}
          >
            {path.length ? (
              <span className={styles.key}>{path.split('.').pop()}:</span>
            ) : null}
            {startBracket}
          </PathTools>
        </div>
        <div className={styles.nestedChildren}>
          {Array.isArray(value)
            ? value.map((_, index) =>
                renderValue({
                  path: path.concat((path ? '.' : '') + String(index)),
                  value: value[index],
                  renderPaths,
                  expandedPaths,
                  onClickPath,
                  onSubmitState,
                  onToggleExpand,
                  selectedStatePath,
                })
              )
            : Object.keys(value)
                .sort()
                .map((key) =>
                  renderValue({
                    path: path.concat((path ? '.' : '') + key),
                    value: value[key],
                    renderPaths,
                    expandedPaths,
                    onClickPath,
                    onSubmitState,
                    onToggleExpand,
                    selectedStatePath,
                  })
                )}
        </div>
        <div className={styles.bracket(false)}>{endBracket}</div>
      </div>
    )
  }
)

type ValueComponentProps = {
  value: string | number | boolean
  path: string
  hasWrapper: boolean
  onClickPath?: (path: string[]) => void
  selectedStatePath: string
  onSubmitState: (newState: string) => void
}

const ValueComponent: FunctionComponent<ValueComponentProps> = memo(
  ({
    value,
    path,
    onClickPath,
    selectedStatePath,
    onSubmitState,
    hasWrapper,
  }) => {
    const [isHoveringString, setHoveringString] = useState(false)

    if (selectedStatePath && path === selectedStatePath) {
      return (
        <div className={styles.genericValue}>
          {path.length ? (
            <span className={styles.key}>{path.split('.').pop()}:</span>
          ) : null}
          <EditValue value={value} onSubmit={onSubmitState} />
        </div>
      )
    }

    if (
      typeof value === 'string' &&
      value[0] === '[' &&
      value[value.length - 1] === ']'
    ) {
      return (
        <div className={styles.otherValue}>
          <PathTools
            path={path}
            onClickPath={onClickPath}
            disabled={!onSubmitState || hasWrapper}
          >
            {path.length ? (
              <span className={styles.key}>{path.split('.').pop()}:</span>
            ) : null}
            {value.substr(1, value.length - 2)}
          </PathTools>
        </div>
      )
    }

    if (typeof value === 'string') {
      return (
        <div className={styles.stringValue}>
          <PathTools
            path={path}
            onClickPath={onClickPath}
            disabled={!onSubmitState || hasWrapper}
          >
            {path.length ? (
              <span className={styles.key}>{path.split('.').pop()}:</span>
            ) : null}
            <div
              onMouseOver={() => setHoveringString(true)}
              onMouseOut={() => setHoveringString(false)}
            >
              "
              {value.length > 50 && !isHoveringString
                ? value.substr(0, 50) + '...'
                : value}
              "
            </div>
          </PathTools>
        </div>
      )
    }

    return (
      <div className={styles.genericValue}>
        <PathTools
          path={path}
          onClickPath={onClickPath}
          disabled={!onSubmitState || hasWrapper}
        >
          {path.length ? (
            <span className={styles.key}>{path.split('.').pop()}:</span>
          ) : null}
          {String(value)}
        </PathTools>
      </div>
    )
  }
)

export type RenderPaths = {
  [path: string]: (children: React.ReactChildren) => React.ReactNode
}

type InspectorProps = {
  value: object
  expandedPaths: string[]
  small?: boolean
  onToggleExpand: (path: string[]) => void
  onClickPath?: (path: string[]) => void
  renderPaths?: RenderPaths
  selectedStatePath?: string
  onSubmitState?: (newState: string) => void
}

const Inspector: FunctionComponent<InspectorProps> = ({
  value,
  expandedPaths,
  small,
  onToggleExpand,
  onClickPath = () => {},
  renderPaths,
  selectedStatePath = '',
  onSubmitState,
}) => {
  return (
    <div className={css(small ? styles.smallWrapper : styles.wrapper)}>
      {renderValue({
        path: '',
        value,
        renderPaths,
        expandedPaths,
        onClickPath,
        onToggleExpand,
        selectedStatePath,
        onSubmitState,
      })}
    </div>
  )
}

export default Inspector
