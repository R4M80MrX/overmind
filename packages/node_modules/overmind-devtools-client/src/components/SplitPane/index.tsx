import { Child, createElement } from 'overmind-components'

import { Component } from '../../overmind'
import * as styles from './styles'

type Props = {
  children: [Child, Child]
  minSize: number
  defaultSize: number
  onChange: (size: number) => void
}

type State = {
  isDragging: boolean
  size: number
  initialSize: number
  initialX: number
}

const SplitPane: Component<Props, State> = (
  { onChange, minSize, children },
  { state, changeState }
) => {
  return (
    <self
      onMount={() => {
        function onMouseMove(event: MouseEvent) {
          if (state.isDragging) {
            const newSize = state.initialSize - (state.initialX - event.clientX)
            changeState({
              size: Math.max(newSize, minSize),
            })
          }
        }

        window.addEventListener('mousemove', onMouseMove)

        return () => {
          window.removeEventListener('mousemove', onMouseMove)
        }
      }}
      className={styles.wrapper}
    >
      <div
        style={{
          width: state.size + 'px',
        }}
      >
        {children[0]}
      </div>
      <div
        className={styles.splitter}
        onMouseDown={(event) => {
          changeState({ isDragging: true, initialX: event.clientX })
        }}
        onMouseUp={() => {
          changeState({
            isDragging: false,
          })
          onChange(state.size)
        }}
      />
      <div>{children[1]}</div>
    </self>
  )
}

SplitPane.initialState = ({ defaultSize }) => ({
  isDragging: false,
  size: defaultSize,
  initialSize: defaultSize,
  initialX: 0,
})

export default SplitPane
